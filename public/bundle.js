var app = (function () {
	'use strict';

	function noop() {}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function addLoc(element, file, line, column, char) {
		element.__svelte_meta = {
			loc: { file, line, column, char }
		};
	}

	function run(fn) {
		fn();
	}

	function append(target, node) {
		target.appendChild(node);
	}

	function insert(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function destroyEach(iterations, detach) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d(detach);
		}
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function createComment() {
		return document.createComment('');
	}

	function addListener(node, event, handler, options) {
		node.addEventListener(event, handler, options);
	}

	function removeListener(node, event, handler, options) {
		node.removeEventListener(event, handler, options);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function blankObject() {
		return Object.create(null);
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function destroyDev(detach) {
		destroy.call(this, detach);
		this.destroy = function() {
			console.warn('Component was already destroyed');
		};
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function flush(component) {
		component._lock = true;
		callAll(component._beforecreate);
		callAll(component._oncreate);
		callAll(component._aftercreate);
		component._lock = false;
	}

	function get() {
		return this._state;
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._slots = blankObject();
		component._bind = options._bind;
		component._staged = {};

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;

		if (!options.root) {
			component._beforecreate = [];
			component._oncreate = [];
			component._aftercreate = [];
		}
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		flush(this.root);
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		newState = assign(this._staged, newState);
		this._staged = {};

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _stage(newState) {
		assign(this._staged, newState);
	}

	function setDev(newState) {
		if (typeof newState !== 'object') {
			throw new Error(
				this._debugName + '.set was called without an object of data key-values to update.'
			);
		}

		this._checkReadOnly(newState);
		set.call(this, newState);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	var protoDev = {
		destroy: destroyDev,
		get,
		fire,
		on,
		set: setDev,
		_recompute: noop,
		_set,
		_stage,
		_mount,
		_differs
	};

	/* src\App.html generated by Svelte v2.16.1 */

	var methods = {
		init(faction){
			app.set({selectedfaction:faction});
		},
		select(class_num){
			let el = document.querySelector('.'+class_num);
			if (el.classList.contains('selected')){
				if (app.get().slots.includes(class_num)){
					app.set({selectedspellbookslot:class_num});
					document.querySelector('.selectscreen').style.visibility = 'visible';
				} else if (app.get().books.includes(class_num)){
					app.set({selectedspellbook:class_num});
					document.querySelector('.selectscreen').style.visibility = 'hidden';
					el.style.visibility = 'hidden';
					document.querySelector('.'+app.get().selectedspellbookslot).style.backgroundImage = el.style.backgroundImage;
				}
			} else {
				try {
					let l = document.querySelector('.selected');
					l.classList.add('unselected');
					l.classList.remove('selected');
				} catch (e){
					console.warn('nothing selected',e);
				}			el.classList.add('selected');
				el.classList.remove('unselected');
			}
			//get elem
			//if it isnt selected, select it, remove selection from all other spellbookslots
			//if it is selected
			//check value
			//single digits
			//set as selectedspellbookslot
			//make selectscreen visable
			//double digits
			//set as selectedspellbook
			//make spellbook display none
			//make spellbookslot div background as img from selectedspellbook
			//make selectscreen invisible
		},
		
	};

	const file = "src\\App.html";

	function tap_handler(event) {
		const { component, ctx } = this._svelte;

		component.init(ctx.faction);
	}

	function click_handler(event) {
		const { component, ctx } = this._svelte;

		component.init(ctx.faction);
	}

	function get_each_context(ctx, list, i) {
		const child_ctx = Object.create(ctx);
		child_ctx.faction = list[i];
		return child_ctx;
	}

	function create_main_fragment(component, ctx) {
		var if_block_anchor, current;

		function select_block_type(ctx) {
			if (ctx.selectedfaction == null) return create_if_block;
			return create_else_block;
		}

		var current_block_type = select_block_type(ctx);
		var if_block = current_block_type(component, ctx);

		return {
			c: function create() {
				if_block.c();
				if_block_anchor = createComment();
			},

			m: function mount(target, anchor) {
				if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},

			p: function update(changed, ctx) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block.d(1);
					if_block = current_block_type(component, ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},

			i: function intro(target, anchor) {
				if (current) return;

				this.m(target, anchor);
			},

			o: run,

			d: function destroy(detach) {
				if_block.d(detach);
				if (detach) {
					detachNode(if_block_anchor);
				}
			}
		};
	}

	// (5:0) {:else}
	function create_else_block(component, ctx) {
		var img, img_src_value, text0, div0, text1, div1, text2, div2, text3, div3, text4, div4, text5, div5, text6, div12, div6, text7, div7, text8, div8, text9, div9, text10, div10, text11, div11;

		function click_handler_1(event) {
			component.select("s0");
		}

		function tap_handler_1(event) {
			component.select("s0");
		}

		function click_handler_2(event) {
			component.select("s1");
		}

		function tap_handler_2(event) {
			component.select("s1");
		}

		function click_handler_3(event) {
			component.select("s2");
		}

		function tap_handler_3(event) {
			component.select("s2");
		}

		function click_handler_4(event) {
			component.select("s3");
		}

		function tap_handler_4(event) {
			component.select("s3");
		}

		function click_handler_5(event) {
			component.select("s4");
		}

		function tap_handler_5(event) {
			component.select("s4");
		}

		function click_handler_6(event) {
			component.select("s5");
		}

		function tap_handler_6(event) {
			component.select("s5");
		}

		function click_handler_7(event) {
			component.select("s10");
		}

		function tap_handler_7(event) {
			component.select("s10");
		}

		function click_handler_8(event) {
			component.select("s11");
		}

		function tap_handler_8(event) {
			component.select("s11");
		}

		function click_handler_9(event) {
			component.select("s12");
		}

		function tap_handler_9(event) {
			component.select("s12");
		}

		function click_handler_10(event) {
			component.select("s13");
		}

		function tap_handler_10(event) {
			component.select("s13");
		}

		function click_handler_11(event) {
			component.select("s14");
		}

		function tap_handler_11(event) {
			component.select("s14");
		}

		function click_handler_12(event) {
			component.select("s15");
		}

		function tap_handler_12(event) {
			component.select("s15");
		}

		return {
			c: function create() {
				img = createElement("img");
				text0 = createText("\n\t");
				div0 = createElement("div");
				text1 = createText("\n\t");
				div1 = createElement("div");
				text2 = createText("\n\t");
				div2 = createElement("div");
				text3 = createText("\n\t");
				div3 = createElement("div");
				text4 = createText("\n\t");
				div4 = createElement("div");
				text5 = createText("\n\t");
				div5 = createElement("div");
				text6 = createText("\n\t");
				div12 = createElement("div");
				div6 = createElement("div");
				text7 = createText("\n\t\t");
				div7 = createElement("div");
				text8 = createText("\n\t\t");
				div8 = createElement("div");
				text9 = createText("\n\t\t");
				div9 = createElement("div");
				text10 = createText("\n\t\t");
				div10 = createElement("div");
				text11 = createText("\n\t\t");
				div11 = createElement("div");
				setStyle(img, "width", "100%");
				setStyle(img, "height", "100%");
				setStyle(img, "z-index", "-1");
				img.src = img_src_value = "" + (ctx.url+ctx.selectedfaction) + "playersheet.png";
				addLoc(img, file, 5, 1, 168);
				addListener(div0, "click", click_handler_1);
				addListener(div0, "tap", tap_handler_1);
				div0.className = "s0 unselected svelte-1d5nrw6";
				setStyle(div0, "width", "19%");
				setStyle(div0, "left", "50%");
				setStyle(div0, "top", "24%");
				setStyle(div0, "height", "19%");
				setStyle(div0, "background-size", "contain");
				setStyle(div0, "background-repeat", "no-repeat");
				addLoc(div0, file, 6, 1, 261);
				addListener(div1, "click", click_handler_2);
				addListener(div1, "tap", tap_handler_2);
				div1.className = "s1 unselected svelte-1d5nrw6";
				setStyle(div1, "width", "20%");
				setStyle(div1, "left", "73%");
				setStyle(div1, "top", "24%");
				setStyle(div1, "height", "19%");
				setStyle(div1, "background-size", "contain");
				setStyle(div1, "background-repeat", "no-repeat");
				addLoc(div1, file, 7, 1, 444);
				addListener(div2, "click", click_handler_3);
				addListener(div2, "tap", tap_handler_3);
				div2.className = "s2 unselected svelte-1d5nrw6";
				setStyle(div2, "width", "19%");
				setStyle(div2, "left", "50%");
				setStyle(div2, "top", "47%");
				setStyle(div2, "height", "19%");
				setStyle(div2, "background-size", "contain");
				setStyle(div2, "background-repeat", "no-repeat");
				addLoc(div2, file, 8, 1, 627);
				addListener(div3, "click", click_handler_4);
				addListener(div3, "tap", tap_handler_4);
				div3.className = "s3 unselected svelte-1d5nrw6";
				setStyle(div3, "width", "20%");
				setStyle(div3, "left", "73%");
				setStyle(div3, "top", "47%");
				setStyle(div3, "height", "19%");
				setStyle(div3, "background-size", "contain");
				setStyle(div3, "background-repeat", "no-repeat");
				addLoc(div3, file, 9, 1, 810);
				addListener(div4, "click", click_handler_5);
				addListener(div4, "tap", tap_handler_5);
				div4.className = "s4 unselected svelte-1d5nrw6";
				setStyle(div4, "width", "19%");
				setStyle(div4, "left", "50%");
				setStyle(div4, "top", "70%");
				setStyle(div4, "height", "19%");
				setStyle(div4, "background-size", "contain");
				setStyle(div4, "background-repeat", "no-repeat");
				addLoc(div4, file, 10, 1, 993);
				addListener(div5, "click", click_handler_6);
				addListener(div5, "tap", tap_handler_6);
				div5.className = "s5 unselected svelte-1d5nrw6";
				setStyle(div5, "width", "20%");
				setStyle(div5, "left", "73%");
				setStyle(div5, "top", "70%");
				setStyle(div5, "height", "19%");
				setStyle(div5, "background-size", "contain");
				setStyle(div5, "background-repeat", "no-repeat");
				addLoc(div5, file, 11, 1, 1176);
				addListener(div6, "click", click_handler_7);
				addListener(div6, "tap", tap_handler_7);
				div6.className = "s10 unselected svelte-1d5nrw6";
				setStyle(div6, "width", "19%");
				setStyle(div6, "left", "0%");
				setStyle(div6, "top", "24%");
				setStyle(div6, "height", "19%");
				setStyle(div6, "background-size", "contain");
				setStyle(div6, "background-repeat", "no-repeat");
				setStyle(div6, "background-image", "url(./images/" + ctx.selectedfaction + "spellbook0.png)");
				addLoc(div6, file, 13, 2, 1494);
				addListener(div7, "click", click_handler_8);
				addListener(div7, "tap", tap_handler_8);
				div7.className = "s11 unselected svelte-1d5nrw6";
				setStyle(div7, "width", "20%");
				setStyle(div7, "left", "23%");
				setStyle(div7, "top", "24%");
				setStyle(div7, "height", "19%");
				setStyle(div7, "background-size", "contain");
				setStyle(div7, "background-repeat", "no-repeat");
				setStyle(div7, "background-image", "url(./images/" + ctx.selectedfaction + "spellbook1.png)");
				addLoc(div7, file, 14, 2, 1743);
				addListener(div8, "click", click_handler_9);
				addListener(div8, "tap", tap_handler_9);
				div8.className = "s12 unselected svelte-1d5nrw6";
				setStyle(div8, "width", "19%");
				setStyle(div8, "left", "0%");
				setStyle(div8, "top", "47%");
				setStyle(div8, "height", "19%");
				setStyle(div8, "background-size", "contain");
				setStyle(div8, "background-repeat", "no-repeat");
				setStyle(div8, "background-image", "url(./images/" + ctx.selectedfaction + "spellbook2.png)");
				addLoc(div8, file, 15, 2, 1993);
				addListener(div9, "click", click_handler_10);
				addListener(div9, "tap", tap_handler_10);
				div9.className = "s13 unselected svelte-1d5nrw6";
				setStyle(div9, "width", "20%");
				setStyle(div9, "left", "23%");
				setStyle(div9, "top", "47%");
				setStyle(div9, "height", "19%");
				setStyle(div9, "background-size", "contain");
				setStyle(div9, "background-repeat", "no-repeat");
				setStyle(div9, "background-image", "url(./images/" + ctx.selectedfaction + "spellbook3.png)");
				addLoc(div9, file, 16, 2, 2242);
				addListener(div10, "click", click_handler_11);
				addListener(div10, "tap", tap_handler_11);
				div10.className = "s14 unselected svelte-1d5nrw6";
				setStyle(div10, "width", "19%");
				setStyle(div10, "left", "0%");
				setStyle(div10, "top", "70%");
				setStyle(div10, "height", "19%");
				setStyle(div10, "background-size", "contain");
				setStyle(div10, "background-repeat", "no-repeat");
				setStyle(div10, "background-image", "url(./images/" + ctx.selectedfaction + "spellbook4.png)");
				addLoc(div10, file, 17, 2, 2492);
				addListener(div11, "click", click_handler_12);
				addListener(div11, "tap", tap_handler_12);
				div11.className = "s15 unselected svelte-1d5nrw6";
				setStyle(div11, "width", "20%");
				setStyle(div11, "left", "23%");
				setStyle(div11, "top", "70%");
				setStyle(div11, "height", "19%");
				setStyle(div11, "background-size", "contain");
				setStyle(div11, "background-repeat", "no-repeat");
				setStyle(div11, "background-image", "url(./images/" + ctx.selectedfaction + "spellbook5.png)");
				addLoc(div11, file, 18, 2, 2741);
				div12.className = "selectscreen";
				setStyle(div12, "visibility", "hidden");
				setStyle(div12, "border", "5px solid black");
				setStyle(div12, "position", "absolute");
				setStyle(div12, "width", "100%");
				setStyle(div12, "left", "2%");
				setStyle(div12, "top", "0%");
				setStyle(div12, "height", "100%");
				addLoc(div12, file, 12, 1, 1359);
			},

			m: function mount(target, anchor) {
				insert(target, img, anchor);
				insert(target, text0, anchor);
				insert(target, div0, anchor);
				insert(target, text1, anchor);
				insert(target, div1, anchor);
				insert(target, text2, anchor);
				insert(target, div2, anchor);
				insert(target, text3, anchor);
				insert(target, div3, anchor);
				insert(target, text4, anchor);
				insert(target, div4, anchor);
				insert(target, text5, anchor);
				insert(target, div5, anchor);
				insert(target, text6, anchor);
				insert(target, div12, anchor);
				append(div12, div6);
				append(div12, text7);
				append(div12, div7);
				append(div12, text8);
				append(div12, div8);
				append(div12, text9);
				append(div12, div9);
				append(div12, text10);
				append(div12, div10);
				append(div12, text11);
				append(div12, div11);
			},

			p: function update(changed, ctx) {
				if ((changed.url || changed.selectedfaction) && img_src_value !== (img_src_value = "" + (ctx.url+ctx.selectedfaction) + "playersheet.png")) {
					img.src = img_src_value;
				}

				if (changed.selectedfaction) {
					setStyle(div6, "background-image", "url(./images/" + ctx.selectedfaction + "spellbook0.png)");
					setStyle(div7, "background-image", "url(./images/" + ctx.selectedfaction + "spellbook1.png)");
					setStyle(div8, "background-image", "url(./images/" + ctx.selectedfaction + "spellbook2.png)");
					setStyle(div9, "background-image", "url(./images/" + ctx.selectedfaction + "spellbook3.png)");
					setStyle(div10, "background-image", "url(./images/" + ctx.selectedfaction + "spellbook4.png)");
					setStyle(div11, "background-image", "url(./images/" + ctx.selectedfaction + "spellbook5.png)");
				}
			},

			d: function destroy(detach) {
				if (detach) {
					detachNode(img);
					detachNode(text0);
					detachNode(div0);
				}

				removeListener(div0, "click", click_handler_1);
				removeListener(div0, "tap", tap_handler_1);
				if (detach) {
					detachNode(text1);
					detachNode(div1);
				}

				removeListener(div1, "click", click_handler_2);
				removeListener(div1, "tap", tap_handler_2);
				if (detach) {
					detachNode(text2);
					detachNode(div2);
				}

				removeListener(div2, "click", click_handler_3);
				removeListener(div2, "tap", tap_handler_3);
				if (detach) {
					detachNode(text3);
					detachNode(div3);
				}

				removeListener(div3, "click", click_handler_4);
				removeListener(div3, "tap", tap_handler_4);
				if (detach) {
					detachNode(text4);
					detachNode(div4);
				}

				removeListener(div4, "click", click_handler_5);
				removeListener(div4, "tap", tap_handler_5);
				if (detach) {
					detachNode(text5);
					detachNode(div5);
				}

				removeListener(div5, "click", click_handler_6);
				removeListener(div5, "tap", tap_handler_6);
				if (detach) {
					detachNode(text6);
					detachNode(div12);
				}

				removeListener(div6, "click", click_handler_7);
				removeListener(div6, "tap", tap_handler_7);
				removeListener(div7, "click", click_handler_8);
				removeListener(div7, "tap", tap_handler_8);
				removeListener(div8, "click", click_handler_9);
				removeListener(div8, "tap", tap_handler_9);
				removeListener(div9, "click", click_handler_10);
				removeListener(div9, "tap", tap_handler_10);
				removeListener(div10, "click", click_handler_11);
				removeListener(div10, "tap", tap_handler_11);
				removeListener(div11, "click", click_handler_12);
				removeListener(div11, "tap", tap_handler_12);
			}
		};
	}

	// (1:0) {#if selectedfaction == null}
	function create_if_block(component, ctx) {
		var each_anchor;

		var each_value = ctx.factions;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
		}

		return {
			c: function create() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_anchor = createComment();
			},

			m: function mount(target, anchor) {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insert(target, each_anchor, anchor);
			},

			p: function update(changed, ctx) {
				if (changed.factions) {
					each_value = ctx.factions;

					for (var i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(each_anchor.parentNode, each_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value.length;
				}
			},

			d: function destroy(detach) {
				destroyEach(each_blocks, detach);

				if (detach) {
					detachNode(each_anchor);
				}
			}
		};
	}

	// (2:1) {#each factions as faction}
	function create_each_block(component, ctx) {
		var img, img_src_value;

		return {
			c: function create() {
				img = createElement("img");
				img._svelte = { component, ctx };

				addListener(img, "click", click_handler);
				addListener(img, "tap", tap_handler);
				img.src = img_src_value = "./images/" + ctx.faction + "banner.png";
				addLoc(img, file, 2, 2, 61);
			},

			m: function mount(target, anchor) {
				insert(target, img, anchor);
			},

			p: function update(changed, _ctx) {
				ctx = _ctx;
				img._svelte.ctx = ctx;
				if ((changed.factions) && img_src_value !== (img_src_value = "./images/" + ctx.faction + "banner.png")) {
					img.src = img_src_value;
				}
			},

			d: function destroy(detach) {
				if (detach) {
					detachNode(img);
				}

				removeListener(img, "click", click_handler);
				removeListener(img, "tap", tap_handler);
			}
		};
	}

	function App(options) {
		this._debugName = '<App>';
		if (!options || (!options.target && !options.root)) {
			throw new Error("'target' is a required option");
		}

		init(this, options);
		this._state = assign({}, options.data);
		if (!('selectedfaction' in this._state)) console.warn("<App> was created without expected data property 'selectedfaction'");
		if (!('factions' in this._state)) console.warn("<App> was created without expected data property 'factions'");
		if (!('url' in this._state)) console.warn("<App> was created without expected data property 'url'");
		this._intro = !!options.intro;

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}

		this._intro = true;
	}

	assign(App.prototype, protoDev);
	assign(App.prototype, methods);

	App.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	const app$1 = new App({
		target: document.body,
		data:{
			factions:['blackgoat','greatcthulhu','yellowsign','crawlingchaos','windwalker','sleeper','openeroftheway','tchotcho',],
			selectedfaction:null,
			selectedspellbookslot:null,
			selectedspellbook:null,
			slots:['s0','s1','s2','s3','s4','s5',],
			books:['s10','s11','s12','s13','s14','s15',],
			url:'./images/',
		}
	});

	return app$1;

}());
//# sourceMappingURL=bundle.js.map
